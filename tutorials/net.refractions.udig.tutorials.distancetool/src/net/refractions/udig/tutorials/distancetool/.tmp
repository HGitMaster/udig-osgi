/**
 * 
 */
package net.refractions.udig.tutorials.distancetool;

import org.eclipse.jface.action.IStatusLineManager;
import org.geotools.referencing.CRS;

import com.vividsolutions.jts.geom.Coordinate;

import net.refractions.udig.project.ui.render.displayAdapter.MapMouseEvent;
import net.refractions.udig.project.ui.tool.AbstractModalTool;
import net.refractions.udig.project.ui.tool.ModalTool;

/**
 * @author Jesse
 *
 */
public class DistanceTool extends AbstractModalTool implements ModalTool {

	public DistanceTool() {
		// Register for mouse events
		// Options are:
			// MOUSE
			// MOTION
			// WHEEL
		super(MOUSE);
	}

	Coordinate start;
	public void mousePressed(MapMouseEvent e) {
		start=getContext().pixelToWorld(e.x, e.y);
	}
	
	public void mouseReleased(MapMouseEvent e) {
		Coordinate end=getContext().pixelToWorld(e.x, e.y);
		try {
			double distance=CRS.distance(start, end, getContext().getCRS());
			displayOnStatusBar(distance);
		} catch (Exception e1) {
			displayError();
		}
	}

	private void displayError() {
		final IStatusLineManager statusBar = getContext().getStatusBar();
		if( statusBar==null )
			return; // shouldn't happen if the tool is being used.
		getContext().updateUI(new Runnable() {
			public void run() {
				statusBar.setErrorMessage("Unable to calculate the distance");
			}
		});
	}

	private void displayOnStatusBar(double distance) {
		final IStatusLineManager statusBar = getContext().getStatusBar();
		if( statusBar==null )
			return; // shouldn't happen if the tool is being used.
		int totalmeters=(int)distance;
		final int km=totalmeters/1000;
		final int meters=totalmeters-(km*1000);
		float cm = (float) (distance-totalmeters)*10000;
		cm = Math.round(cm);
		final float finalcm=cm/100;
		getContext().updateUI(new Runnable(){

			public void run() {
				statusBar.setMessage("Distance =  "+km+","+meters+"m "+finalcm+"cm");
			}
			
		});
	}
}

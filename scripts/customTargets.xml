<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<target name="allElements">
		<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="net.refractions.udig_base" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="net.refractions.udig_platform" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="net.refractions.udig_application" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="net.refractions.udig_language" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="net.refractions.udig_printing" />
		</ant>
		<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="net.refractions.udig" />
		</ant>
		<!--ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="org.ossim" />
		</ant-->

<!--		<ant antfile="${genericTargets}" target="${target}">
		<property name="type" value="feature" />
		<property name="id" value="net.refractions.udig_sdk" />
		</ant>
-->	</target>

	<!-- ===================================================================== -->
	<!-- Targets to assemble the built elements for particular configurations  -->
	<!-- These generally call the generated assemble scripts (named in -->
	<!-- ${assembleScriptName}) but may also add pre and post processing -->
	<!-- Add one target for each root element and each configuration -->
	<!-- ===================================================================== -->

	<target name="assemble.net.refractions.udig_base">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>
	<target name="assemble.net.refractions.udig_platform">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>
	<target name="assemble.net.refractions.udig_application">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>
	<target name="assemble.net.refractions.udig_language">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>
	<target name="assemble.net.refractions.udig_printing">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>
	<target name="assemble.net.refractions.udig">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>
	<!--target name="assemble.org.ossim">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target-->
	<target name="assemble.net.refractions.udig_sdk">
		<ant antfile="${assembleScriptName}" dir="${buildDirectory}"/>
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<!-- this is where the hacks show up -->

		<!-- copy fragments to plugins directory -->
		<copy todir="${buildDirectory}/plugins">
			<fileset dir="${buildDirectory}/fragments" excludes="**/.svn"/>
		</copy>

		<!-- match up feature directories with id -->
		<antcall target="allElements">
			<param name="target" value="renameFeature"/>
		</antcall>

		<!--copy todir="${buildDirectory}/features">
			<fileset dir="${buildDirectory}/features" includes="*-feature/**/*" excludes="**/.svn"
/>
			<mapper type="regexp" from="^(.*)-feature/(.*)$$" to="\1/\2"/>
		</copy-->
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<!--antcall target="getBaseComponents" /-->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
			<!-- huge hack -->
			<!--xslt basedir="${buildDirectory}" destdir="${buildDirectory}" style="${buildDirectory}/../hack.xsl">
				<mapper type="glob" from="assemble.*.xml" to="assemble.*.xml.hack"/>
			</xslt>
			<xslt basedir="${buildDirectory}" destdir="${buildDirectory}" style="${buildDirectory}/../hack.xsl">
				<mapper type="glob" from="package.*.xml" to="package.*.xml.hack"/>
			</xslt-->
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<!-- concatenate all the logs -->
		<concat destfile="${build.log}">
			<fileset dir="${buildDirectory}/${buildLabel}/compilelogs" includes="**/*.log"/>
		</concat>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>

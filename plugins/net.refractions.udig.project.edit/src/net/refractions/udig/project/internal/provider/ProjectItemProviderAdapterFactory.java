/**
 * <copyright>
 * </copyright>
 *
 * $Id: ProjectItemProviderAdapterFactory.java 22387 2006-10-25 18:40:20Z jeichar $
 */
package net.refractions.udig.project.internal.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.refractions.udig.project.internal.util.ProjectAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * @generated
 */
public class ProjectItemProviderAdapterFactory extends ProjectAdapterFactory
        implements
            ComposeableAdapterFactory,
            IChangeNotifier {
    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public static final String       copyright      = "uDig - User Friendly Desktop Internet GIS client http://udig.refractions.net (C) 2004, Refractions Research Inc. This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; version 2.1 of the License. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details."; //$NON-NLS-1$

    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier        changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    protected Collection             supportedTypes = new ArrayList();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public ProjectItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.ContextModel} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ContextModelItemProvider contextModelItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.ContextModel}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public Adapter createContextModelAdapter() {
        if (contextModelItemProvider == null) {
            contextModelItemProvider = new ContextModelItemProvider(this);
        }

        return contextModelItemProvider;
    }

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.Layer}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createLayerAdapter() {
        return new LayerItemProvider(this);
    }

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.Map}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createMapAdapter() {
        return new MapItemProvider(this);
    }

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.Project}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createProjectAdapter() {
        return new ProjectItemProvider(this);
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.ProjectRegistry} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected ProjectRegistryItemProvider projectRegistryItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.ProjectRegistry}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public Adapter createProjectRegistryAdapter() {
        if (projectRegistryItemProvider == null) {
            projectRegistryItemProvider = new ProjectRegistryItemProvider(this);
        }

        return projectRegistryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.StyleBlackboard} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected StyleBlackboardItemProvider styleBlackboardItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.StyleBlackboard}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public Adapter createStyleBlackboardAdapter() {
        if (styleBlackboardItemProvider == null) {
            styleBlackboardItemProvider = new StyleBlackboardItemProvider(this);
        }

        return styleBlackboardItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.StyleEntry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StyleEntryItemProvider styleEntryItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.StyleEntry}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createStyleEntryAdapter() {
        if (styleEntryItemProvider == null) {
            styleEntryItemProvider = new StyleEntryItemProvider(this);
        }

        return styleEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.LayerFactory} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LayerFactoryItemProvider layerFactoryItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.LayerFactory}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public Adapter createLayerFactoryAdapter() {
        if (layerFactoryItemProvider == null) {
            layerFactoryItemProvider = new LayerFactoryItemProvider(this);
        }

        return layerFactoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.PicoBlackboard} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected PicoBlackboardItemProvider picoBlackboardItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.PicoBlackboard}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public Adapter createPicoBlackboardAdapter() {
        if (picoBlackboardItemProvider == null) {
            picoBlackboardItemProvider = new PicoBlackboardItemProvider(this);
        }

        return picoBlackboardItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.Blackboard} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BlackboardItemProvider blackboardItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.Blackboard}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter createBlackboardAdapter() {
        if (blackboardItemProvider == null) {
            blackboardItemProvider = new BlackboardItemProvider(this);
        }

        return blackboardItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.BlackboardEntry} instances.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * @generated
     */
    protected BlackboardEntryItemProvider blackboardEntryItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.BlackboardEntry}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public Adapter createBlackboardEntryAdapter() {
        if (blackboardEntryItemProvider == null) {
            blackboardEntryItemProvider = new BlackboardEntryItemProvider(this);
        }

        return blackboardEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link net.refractions.udig.project.internal.EditManager} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EditManagerItemProvider editManagerItemProvider;

    /**
     * This creates an adapter for a {@link net.refractions.udig.project.internal.EditManager}.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public Adapter createEditManagerAdapter() {
        if (editManagerItemProvider == null) {
            editManagerItemProvider = new EditManagerItemProvider(this);
        }

        return editManagerItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory( ComposedAdapterFactory parentAdapterFactory ) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public boolean isFactoryForType( Object type ) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public Adapter adapt( Notifier notifier, Object type ) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public Object adapt( Object object, Object type ) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class) || (((Class) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public void addListener( INotifyChangedListener notifyChangedListener ) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @generated
     */
    public void removeListener( INotifyChangedListener notifyChangedListener ) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void fireNotifyChanged( Notification notification ) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

}
